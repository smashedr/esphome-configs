# PIR - BENCHED

substitutions:
  # https://esphome.io/components/substitutions
  friendly_name: "Test Box 48"
  box_num: "48"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"

packages:
  # https://esphome.io/components/packages.html
  debug: !include { file: include/debug.yaml }
  common: !include { file: include/common.yaml }
  status_led: !include
    file: include/status_led.yaml
    vars:
      pin: GPIO26
  counters: !include { file: include/counters.yaml }
  discord_logs: !include
    file: include/discord_logs.yaml
    vars:
      channel_id: !secret discord_logs_id

esphome:
  # https://esphome.io/components/esphome
  on_boot:
    - priority: -200
      then:
        - logger.log: "Boot -200"
        - switch.turn_off: toggle_component

#mqtt:
#  # https://esphome.io/components/mqtt.html
#  broker: !secret mqtt_broker
#  #port: !secret mqtt_port
#  username: !secret mqtt_username
#  password: !secret mqtt_password
#  client_id: "${box_name}${box_num}"
#  #clean_session : true
#  discovery: false
#  discover_ip: false
#  log_topic:
#    topic: device/logs
#    level: ERROR

#logger:
#  # https://esphome.io/components/logger
#  on_message:
#    level: ERROR
#    then:
#      - number.increment: error_log_count
#      - homeassistant.action:
#          action: notify.ha_discord
#          data:
#            target: !secret discord_logs_id
#            message: !lambda |-
#              // return std::string("Error: ") + "${friendly_name}: " + message;
#              return "**${friendly_name}** - `${box_name}${box_num}` - <http://192.168.1.2${box_num}/>\n```" + message + "```";

#- script.execute:
#    id: send_discord
#    message: !lambda |-
#      return std::string("Error: ") + "${box_num}: " + message;

#- script.execute:
#    id: send_discord
#    message: !lambda |-
#      return std::string("Error: ") + message;

#- mqtt.publish:
#    topic: device/logs
#    payload: !lambda |-
#      return "Triggered on_message with level " + to_string(level) + ",
#          tag " + tag + " and message " + message;

#esp32_improv:
#  # https://esphome.io/components/esp32_improv
#  authorizer: touch_1
#  status_indicator: mono_chromo
#  identify_duration: 30s

#wifi:
#  # https://esphome.io/components/wifi
#  on_connect:
#    - logger.log: "WiFi Connected..."
#  on_disconnect:
#    - logger.log: "WiFi Disconnected!"
#    - number.increment: wifi_dc_count

api:
  # https://esphome.io/components/api
  on_client_connected:
    - lambda: |-
        if (client_info.find("Home Assistant") != std::string::npos) {
          ESP_LOGI("api", "API Connected: Home Assistant (%s)", client_address.c_str());
        } else {
          ESP_LOGI("api", "Client Connected: %s (%s)", client_info.c_str(), client_address.c_str());
        }
  on_client_disconnected:
    - lambda: |-
        if (client_info.find("Home Assistant") != std::string::npos) {
          ESP_LOGW("api", "API Disconnected: Home Assistant (%s)", client_address.c_str());
        } else {
          ESP_LOGI("api", "Client Disconnected: %s (%s)", client_info.c_str(), client_address.c_str());
        }

web_server:
  # https://esphome.io/components/web_server
  version: 3
  sorting_groups:
    - id: sg_lights
      name: "Lights"
      sorting_weight: -30

http_request:
  # https://esphome.io/components/http_request
  timeout: 6s
  verify_ssl: false

script:
  # https://esphome.io/components/script
  - id: send_discord
    mode: parallel
    max_runs: 2
    parameters:
      message: string
    then:
      - logger.log:
          format: "message: %s"
          args: ["message.c_str()"]
      - logger.log:
          format: "discord_webhook: %s"
          args: ["id(discord_webhook).state.c_str()"]
      - http_request.post:
          url: !lambda "return id(discord_webhook).state.c_str();"
          headers:
            Content-Type: application/json
          json:
            content: !lambda "return message;"
            username: "${box_name}${box_num}"
          on_response:
            then:
              - logger.log:
                  format: "Response status: %d, Duration: %u ms"
                  args:
                    - response->status_code
                    - response->duration_ms
              - lambda: |-
                  ESP_LOGD("script", "Response status: %d, Duration: %u ms", response->status_code, response->duration_ms);
          on_error:
            then:
              - logger.log: "Request failed!"

light:
  # https://esphome.io/components/light/
  - platform: monochromatic
    name: "Monochromatic Light ${box_num}"
    id: chromatic_led
    icon: mdi:lightbulb-outline
    output: mono_chromo
    effects: !include { file: include/light/effects/pulse.yaml }
    web_server:
      sorting_group_id: sg_lights
      sorting_weight: 10

#number:
#  # https://esphome.io/#number-components
#  - platform: template
#    name: "Error Count ${box_num}"
#    id: error_log_count
#    icon: mdi:alert-plus
#    entity_category: diagnostic
#    optimistic: true
#    restore_value: false
#    initial_value: 0
#    min_value: 0
#    max_value: 999
#    step: 1
#    web_server:
#      sorting_group_id: sg_device
#      sorting_weight: -19
#
#  - platform: template
#    name: "API Disconnect Count ${box_num}"
#    id: api_dc_count
#    icon: mdi:web-plus
#    entity_category: diagnostic
#    optimistic: true
#    restore_value: false
#    initial_value: 0
#    min_value: 0
#    max_value: 999
#    step: 1
#    web_server:
#      sorting_group_id: sg_device
#      sorting_weight: -18
#
#  - platform: template
#    name: "WIFI Disconnect Count ${box_num}"
#    id: wifi_dc_count
#    icon: mdi:wifi-plus
#    entity_category: diagnostic
#    optimistic: true
#    restore_value: false
#    initial_value: 0
#    min_value: 0
#    max_value: 999
#    step: 1
#    web_server:
#      sorting_group_id: sg_device
#      sorting_weight: -17

#remote_receiver:
#  pin: GPIO23
#  dump: all
#  on_raw:
#    then:
#      - logger.log: "RX on_raw"
#      - light.toggle: rgb_led

output:
  # https://esphome.io/components/output/
  - platform: ledc
    id: mono_chromo
    pin: GPIO25
    max_power: 80%

  #- platform: ledc
  #  id: rgb_r
  #  pin: GPIO27
  #  max_power: 75%
  #- platform: ledc
  #  id: rgb_g
  #  pin: GPIO14
  #  max_power: 80%
  #- platform: ledc
  #  id: rgb_b
  #  pin: GPIO12
  #  max_power: 80%

switch:
  # https://esphome.io/#switch-components
  - !include {
      file: include/switch/toggle_component.yaml,
      vars: { name: Photoresistor, component: photoresistor },
    }

  #- platform: template
  #  name: "Presence Light ${box_num}"
  #  id: presence_light
  #  icon: mdi:alarm-light-off-outline
  #  optimistic: true
  #  restore_mode: RESTORE_DEFAULT_OFF
  #  turn_on_action:
  #    - if:
  #        condition:
  #          - binary_sensor.is_on: presence
  #        then:
  #          - light.turn_on: mono_chromo
  #  turn_off_action:
  #    - light.turn_off: mono_chromo

button:
  # https://esphome.io/#button-components
  - !include {
      file: include/button/update_component.yaml,
      vars: { name: Photoresistor, component: photoresistor },
    }

  - platform: template
    name: "Debug ${box_num}"
    icon: mdi:bug-play
    on_press:
      - logger.log: "Discord Shit Yo..."
      - homeassistant.action:
          action: notify.ha_discord
          data:
            target: !secret discord_logs_id
            message: !lambda |-
              std::string message = "Test error message.";
              return "**${friendly_name}** - `${box_name}${box_num}` - <http://" + id(counters_wifi_ip).state + "/>\n```" + message + "```";

  - platform: template
    name: "Trigger Error ${box_num}"
    icon: mdi:bug-play
    on_press:
      - logger.log:
          format: "Test ERROR log message..."
          level: ERROR
      #- http_request.get:
      #    url: "https://hp9284gh2h4ga.com/"

      #- script.execute:
      #    id: send_discord
      #    message: !lambda |-
      #      std::string message = "Test Message";
      #      return "Message: " + message;

      #- mqtt.publish:
      #    topic: device/logs
      #    payload: !lambda |-
      #      return "This is a test error log message.";

#binary_sensor:
#  # https://esphome.io/#binary-sensor-components
#  - platform: gpio
#    name: "Touch 1 - ${box_num}"
#    id: touch_1
#    icon: mdi:gesture-tap-box
#    pin:
#      number: 16
#      mode: INPUT_PULLUP
#    on_press:
#      then:
#        - logger.log: "Can't Touch This"
#        - light.toggle: chromatic_led
#
#  #- !include { file: include/binary/api_connected.yaml }

#  - id: !extend api_status
#    on_press:
#      then:
#        - logger.log:
#            format: "API Connected..."
#            level: INFO
#    on_release:
#      then:
#        - number.increment: api_dc_count
#        - logger.log:
#            format: "API Disconnected!"
#            level: WARN

#- platform: gpio
#  pin: GPIO19
#  name: "Presence ${box_num}"
#  id: presence
#  #icon: mdi:motion-sensor
#  device_class: motion
#  #filters:
#  #  - delayed_off: 60s
#  on_press:
#    then:
#      - if:
#          condition:
#            - switch.is_on: presence_light
#          then:
#            - light.turn_on: main_led
#  on_release:
#    then:
#      - light.turn_off: main_led

text_sensor:
  # https://esphome.io/#text-sensor-components
  - platform: homeassistant
    id: discord_webhook
    entity_id: input_text.discord_webhook

sensor:
  # https://esphome.io/#sensor-components
  - platform: adc
    # https://esphome.io/components/sensor/adc
    name: "Photoresistor ${box_num}"
    id: photoresistor
    icon: mdi:lightning-bolt-circle
    pin: GPIO36
    attenuation: 12db
    update_interval: 1s
    disabled_by_default: true
