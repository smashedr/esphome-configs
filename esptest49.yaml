# BENCHED

substitutions:
  box_num: "49"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"
  update_interval: "1min"
  force_update: "true"

<<: !include .common.yaml
<<: !include { file: include/web_server.yaml, vars: { version: 3 } }

captive_portal:

esphome:
  name: "${box_name}${box_num}"
  comment: "${type}: ${board} (${comment})"
  on_boot:
    then:
      - rtttl.play: "SMWTheme:d=4,o=6,b=100:16e,16e,32p,8e,16c,8e,8g,8p,8g5,8p"
      #- switch.turn_off: buzzer
      #- delay: 30s
      #- if:
      #    condition:
      #      - binary_sensor.is_off: alarm_arm
      #    then:
      #      - light.turn_off: red_led
      #- if:
      #    condition:
      #      - binary_sensor.is_on: alarm_arm
      #    then:
      #      - light.turn_on: red_led

debug:
  update_interval: 5min

api:
  encryption:
    key: !secret enc_key
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda "return song_str;"

light:
  - !include { file: include/light/status_led.yaml, vars: { pin: 32 } }

  - platform: binary
    name: "Red LED ${box_num}"
    id: red_led
    output: red_out

button:
  - !include { file: include/button/restart.yaml }
  - !include { file: include/button/safe_mode.yaml }

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false
  frequency: 400kHz

output:
  - platform: gpio
    id: red_out
    pin: GPIO33

  - platform: ledc
    pin: GPIO27
    id: rtttl_out

rtttl:
  output: rtttl_out
#  on_finished_playback:
#    - logger.log: "Playback Finished."

#one_wire:
#  - platform: gpio
#    pin: GPIO33

font:
  - file: "fonts/arial.ttf"
    id: font1
    size: 14
  - file: "fonts/arial.ttf"
    id: font2
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    #reset_pin: D0
    #update_interval: 5s
    lambda: |-
      if (!id(ha_status).state) {
        it.printf(0, 0, id(font1), "Connecting to HA...");
      } else {
        it.printf(0, 0, id(font1), "Online.");

        // it.printf(0, 0, id(font1), "IP:");
        // it.printf(128, 0, id(font1), TextAlign::RIGHT, "%s", id(wifi_ip).state.c_str());

        // it.printf(0, 23, id(font2), "Fridge:");
        // it.printf(128, 23, id(font2), TextAlign::RIGHT, "%.1f°F", id(temp1).state * 1.8 + 32);

        // it.printf(0, 46, id(font2), "Freezer:");
        // it.printf(128, 46, id(font2), TextAlign::RIGHT, "%.1f°F", id(temp2).state * 1.8 + 32);
      }
      it.printf(0, 23, id(font1), "IP:");
      it.printf(128, 23, id(font1), TextAlign::RIGHT, "%s", WiFi.localIP().toString().c_str());

text_sensor:
  - !include { file: include/text/debug.yaml }
  - !include { file: include/text/version.yaml }
  - !include { file: include/text/wifi_info.yaml }

  #- platform: homeassistant
  #  name: "WiFi IP Address"
  #  id: wifi_ip
  #  entity_id: sensor.wifi_ip_49

binary_sensor:
  - !include { file: include/binary/status.yaml }
  - !include { file: include/binary/ha_status.yaml }

  - platform: gpio
    name: "Door Freezer"
    id: door_sensor_1
    pin:
      number: 19
      mode: INPUT_PULLUP
    device_class: door
    on_press:
      then:
        - logger.log: "Freezer --- OPEN"
        # - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - light.turn_on: main_led
    on_release:
      then:
        - logger.log: "Freezer --- CLOSED"
        - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - if:
            condition:
              binary_sensor.is_off: door_sensor_2
            then:
              - light.turn_off: main_led

  - platform: gpio
    name: "Door Refrigerator"
    id: door_sensor_2
    pin:
      number: 18
      mode: INPUT_PULLUP
    device_class: door
    on_press:
      then:
        - logger.log: "Refrigerator --- OPEN"
        # - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - light.turn_on: main_led
    on_release:
      then:
        - logger.log: "Refrigerator --- CLOSED"
        - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - if:
            condition:
              binary_sensor.is_off: door_sensor_1
            then:
              - light.turn_off: main_led

  #- platform: gpio
  #  pin:
  #    number: 19
  #    mode: INPUT_PULLUP
  #  name: "Physical Button ${box_num}"
  #  icon: mdi:radiobox-marked
  #  filters:
  #    - invert:
  #  on_click:
  #    - min_length: 1ms
  #      max_length: 1000ms
  #      then:
  #        - logger.log: ">1 Second Single Click"
  #        - light.toggle: main_led
  #    - min_length: 1001ms
  #      max_length: 4999ms
  #      then:
  #        - logger.log: "1-5 Second Long Press"
  #    - min_length: 5000ms
  #      max_length: 10000ms
  #      then:
  #        - logger.log: "5< Second Long Press"

sensor:
  - !include { file: include/sensor/debug.yaml }
  - !include { file: include/sensor/internal_temperature.yaml }
  - !include { file: include/sensor/uptime.yaml }
  - !include { file: include/sensor/wifi_signal.yaml }
