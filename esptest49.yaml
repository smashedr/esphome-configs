# Refrigerator/Front Door - Kitchen

substitutions:
  # https://esphome.io/components/substitutions
  friendly_name: "Test Box 49"
  box_num: "49"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"

packages:
  # https://esphome.io/components/packages.html
  debug: !include { file: include/debug.yaml }
  common: !include { file: include/common.yaml }
  status_led: !include
    file: include/status_led.yaml
    vars:
      pin: GPIO32

esphome:
  # https://esphome.io/components/esphome
  on_boot:
    - priority: 600
      then:
        - rtttl.play: "SMWTheme:d=4,o=6,b=100:16e,16e,32p,8e,16c,8e,8g,8p,8g5,8p"
    #- priority: -100
    #  then:
    #    - if:
    #        condition:
    #          - switch.is_on: kitchen_light
    #          - light.is_on: main_led
    #        then:
    #          - logger.log: "Turning Off: main_led"
    #          - light.turn_off: main_led
    #        else:
    #          - if:
    #              condition:
    #                - switch.is_on: night_light_switch
    #              then:
    #                - logger.log: "Turning On: main_led"
    #                - light.turn_on: main_led
    #- priority: 200
    #  then:
    #    - switch.turn_off: buzzer
    #    - delay: 30s
    #    - if:
    #        condition:
    #          - binary_sensor.is_off: alarm_arm
    #        then:
    #          - light.turn_off: red_led
    #    - if:
    #        condition:
    #          - binary_sensor.is_on: alarm_arm
    #        then:
    #          - light.turn_on: red_led

api:
  # https://esphome.io/components/api
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda "return song_str;"

script:
  # https://esphome.io/components/script
  - id: close_fridge
    parameters:
      door: string
    then:
      - logger.log:
          format: "Closed: %s"
          args: ["door.c_str()"]
      - rtttl.play: "one:d=4,o=4,b=240:6e6"
      - if:
          condition:
            - binary_sensor.is_off: door_sensor_1
            - binary_sensor.is_off: door_sensor_2
          then:
            - light.turn_off: main_led

light:
  # https://esphome.io/components/light/
  - platform: binary
    name: "Red LED ${box_num}"
    id: red_led
    output: red_out

#switch:
#  # https://esphome.io/#switch-components
#  - platform: template
#    name: "Night Light ${box_num}"
#    id: night_light_switch
#    icon: mdi:lightbulb-night
#    optimistic: true
#    turn_on_action:
#      #- logger.log: "Light Enabled"
#      - if:
#          condition:
#            switch.is_off: kitchen_light
#          then:
#            - light.turn_on: main_led
#    turn_off_action:
#      #- logger.log: "Light Disabled"
#      - light.turn_off: main_led
#
#  - platform: homeassistant
#    id: kitchen_light
#    entity_id: light.kitchen
#    on_turn_on:
#      then:
#        - logger.log: "Kitchen Light On"
#        - light.turn_off: main_led
#    on_turn_off:
#      then:
#        - if:
#            condition:
#              - switch.is_on: night_light_switch
#            then:
#              - logger.log: "Kitchen Light Off"
#              - light.turn_on: main_led

font:
  # https://esphome.io/components/font
  #- file: "fonts/arial.ttf"
  #  id: font1
  #  size: 14
  #- file: "fonts/arial.ttf"
  #  id: font2
  #  size: 16
  - file:
      type: gfonts
      family: "Red Hat Text"
      #italic : false
      #weight: 400
    id: red_hat1
    size: 14
    #bpp: 1
    glyphsets:
      - GF_Latin_Core
  - file:
      type: gfonts
      family: "Red Hat Text"
      #italic : false
      #weight: 400
    id: red_hat2
    size: 16
    #bpp: 1
    glyphsets:
      - GF_Latin_Core

display:
  # https://esphome.io/#display-components
  - platform: ssd1306_i2c
    id: main_display
    model: "SSD1306 128x64"
    address: 0x3C
    #reset_pin: D0
    #update_interval: 5s
    lambda: |-
      if (!global_api_server->is_connected() ) {
        it.printf(0, 0, id(red_hat1), "Connecting to HA...");

        it.printf(0, 23, id(red_hat2), "IP:");
        it.printf(128, 23, id(red_hat2), TextAlign::RIGHT, "%s",
            static_cast<const char*>(id(wifi_info_ip).state.c_str()));
      } else {
        it.printf(0, 0, id(red_hat1), "IP:");
        it.printf(128, 0, id(red_hat1), TextAlign::RIGHT, "%s",
            static_cast<const char*>(id(wifi_info_ip).state.c_str()));
        
        it.printf(0, 23, id(red_hat2), "Doors:");
        if ( id(door_sensor_1).state ) {
          it.printf(128, 23, id(red_hat2), TextAlign::RIGHT, "FREEZER");
        } else if (id(door_sensor_2).state) {
          it.printf(128, 23, id(red_hat2), TextAlign::RIGHT, "FRIDGE");
        } else if (id(door_sensor_3).state) {
          it.printf(128, 23, id(red_hat2), TextAlign::RIGHT, "FRONT");
        } else {
          it.printf(128, 23, id(red_hat2), TextAlign::RIGHT, "Closed");
        }
        
        it.printf(0, 46, id(red_hat2), "Alarm:");
        if ( id(alarm_active).state ) {
          it.printf(128, 46, id(red_hat2), TextAlign::RIGHT, "%s", "ACTIVE");
        } else if (id(alarm_arm).state) {
          it.printf(128, 46, id(red_hat2), TextAlign::RIGHT, "%s", "ARMED");
        } else {
          it.printf(128, 46, id(red_hat2), TextAlign::RIGHT, "%s", "Disarmed");
        }
      }

i2c:
  # https://esphome.io/components/i2c
  sda: GPIO21
  scl: GPIO22
  scan: false
  frequency: 400kHz

output:
  # https://esphome.io/components/output/
  - platform: gpio
    id: red_out
    pin: GPIO33

  - platform: ledc
    pin: GPIO27
    id: rtttl_out

rtttl:
  # https://esphome.io/components/rtttl
  output: rtttl_out

binary_sensor:
  # https://esphome.io/#binary-sensor-components
  - platform: gpio
    name: "Door Freezer"
    id: door_sensor_1
    device_class: door
    pin:
      number: 19
      mode: INPUT_PULLUP
    on_state:
      then:
        - component.update: main_display
    on_press:
      then:
        - logger.log: "Opened: Freezer"
        - light.turn_on: main_led
    on_release:
      then:
        - script.execute:
            id: close_fridge
            door: Freezer

  - platform: gpio
    name: "Door Refrigerator"
    id: door_sensor_2
    device_class: door
    pin:
      number: 18
      mode: INPUT_PULLUP
    on_state:
      then:
        - component.update: main_display
    on_press:
      then:
        - logger.log: "Opened: Refrigerator"
        - light.turn_on: main_led
    on_release:
      then:
        - script.execute:
            id: close_fridge
            door: Refrigerator

  - platform: gpio
    name: "Door Front"
    id: door_sensor_3
    device_class: door
    pin:
      number: 5
      mode: INPUT_PULLUP
    on_state:
      then:
        - component.update: main_display
    on_press:
      then:
        - logger.log: "Open: Front Door"
        - if:
            condition:
              - binary_sensor.is_off: alarm_active
            then:
              - rtttl.play: "two:d=4,o=4,b=250:e6,16p,e6"
    on_release:
      then:
        - logger.log: "Closed: Front Door"
        - if:
            condition:
              - binary_sensor.is_off: alarm_active
            then:
              - rtttl.play: "onel:d=1,o=5,b=100:8e6"

  - platform: homeassistant
    id: alarm_arm
    entity_id: input_boolean.alarm_arm
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_off: alarm_arm
            then:
              - logger.log: "ALARM --- DISARM"
              - light.turn_off: red_led
        - if:
            condition:
              - binary_sensor.is_on: alarm_arm
            then:
              - logger.log: "ALARM --- ARM"
              - light.turn_on: red_led

  - platform: homeassistant
    id: alarm_active
    entity_id: input_boolean.alarm_active
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_off: alarm_active
            then:
              - logger.log: "ALARM --- OFF"
        - if:
            condition:
              - binary_sensor.is_on: alarm_active
            then:
              - logger.log: "ALARM --- ACTIVATE"
              - while:
                  condition:
                    - binary_sensor.is_on: alarm_active
                  then:
                    - rtttl.play: "siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e"
