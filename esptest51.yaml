# BENCHED - VA TEST 1

substitutions:
  # https://esphome.io/components/substitutions
  friendly_name: "Test Box 51"
  box_num: "51"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"

packages:
  # https://esphome.io/components/packages.html
  debug: !include { file: include/debug.yaml }
  common: !include { file: include/common.yaml }
  status_led: !include
    file: include/status_led.yaml
    vars:
      pin: GPIO26
  apds9960: !include { file: include/apds9960/apds9960.yaml }
  voice_assistant: !include { file: include/va/voice_assistant.yaml }
  micro_wake_word: !include
    file: include/va/micro_wake_word.yaml
    vars:
      model: models/jarvis.json
  discord_logs: !include
    file: include/va/discord.yaml
    vars:
      channel_id: !secret discord_va_id

${type}:
  # https://esphome.io/#supported-microcontrollers
  framework:
    sdkconfig_options:
      CONFIG_ESP32_DEFAULT_CPU_FREQ_240: "y"

esphome:
  # https://esphome.io/components/esphome
  on_boot:
    - priority: 600
      then:
        - logger.log: "Boot 600"
        - rtttl.play: !lambda "return id(tune_text).state;"
    - priority: -100
      then:
        - script.execute: turn_off_led

web_server:
  # https://esphome.io/components/web_server
  sorting_groups:
    - id: sg_audio
      name: "Audio"
      sorting_weight: -20

light:
  # https://esphome.io/components/light/
  - platform: rgb
    name: "RGB LED ${box_num}"
    id: rgb_led
    icon: mdi:lightbulb-outline
    disabled_by_default: true
    red: rgb_r
    green: rgb_g
    blue: rgb_b
    effects: !include_dir_merge_list include/light/effects

script:
  # https://esphome.io/components/script
  - id: !extend micro_wake_enable
    then:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - light.turn_off: rgb_led
            - text_sensor.template.publish:
                id: va_text
                state: "Frasier is Live..."

  - id: !extend va_start
    then:
      - if:
          condition:
            - voice_assistant.is_running:
          then:
            #- script.execute: va_end
            - script.execute: set_text

  - id: !extend va_end
    then:
      - script.execute: turn_off_led
      - rtttl.play: "s:d=4,o=6,b=225:8e,4d"
      - delay: 30s
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: set_text

  - id: turn_off_led
    mode: restart
    then:
      - logger.log: "Running script: turn_off_led"
      - if:
          condition:
            switch.is_on: micro_wake_toggle
          then:
            light.turn_off: rgb_led
          else:
            light.turn_on:
              id: rgb_led
              brightness: 40%
              red: 100%
              green: 0%
              blue: 0%
              effect: None

  - id: set_text
    then:
      - logger.log: "Running script: set_text"
      - if:
          condition:
            switch.is_on: micro_wake_toggle
          then:
            text_sensor.template.publish:
              id: va_text
              state: "Frasier is Live"
          else:
            text_sensor.template.publish:
              id: va_text
              state: "Frasier Out!"

voice_assistant:
  # https://esphome.io/components/voice_assistant
  on_listening:
    then:
      # Listening - We are listening to what you are saying for processing
      #- rtttl.play: "s:d=4,o=6,b=225:8d,4e"
      - rtttl.play: "s:d=4,o=6,b=225:8d"
      - light.turn_on:
          id: rgb_led
          brightness: 80%
          red: 0%
          green: 0%
          blue: 100%
          transition_length: 0s
          #effect: "Slow Pulse"
      - text_sensor.template.publish:
          id: va_text
          state: "I'm Listening..."

  on_stt_vad_end:
    then:
      # STT Start - We are done listening and starting to process stt
      - light.turn_on:
          id: rgb_led
          brightness: 80%
          red: 0%
          green: 100%
          blue: 0%
          #transition_length: 0s
          effect: "Fast Pulse"
      #- rtttl.play: "s:d=4,o=6,b=225:8e"
      - text_sensor.template.publish:
          id: va_text
          state: "Thinking..."

  on_stt_end:
    then:
      # STT End - We have processed what you said as text
      - lambda: |-
          id(va_text).publish_state(x.c_str());

  on_tts_start:
    then:
      # TTS Start - We now have the response text from the VA
      - lambda: |-
          id(va_text).publish_state(x.c_str());
      - homeassistant.action:
          action: notify.alexa_media
          data:
            target: media_player.desk
          data_template:
            message: "{{ message }}"
          variables:
            message: |-
              return x.c_str();

  on_end:
    then:
      # DONE - We are done, restart micro_wake_word when VA is done...
      - script.execute: va_end

  on_error:
    then:
      # ERROR - You fucked up Chuck!
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 100%
      - rtttl.play: "s:d=4,o=6,b=120:f#"
      - lambda: |-
          char formatted_message[128];
          snprintf(formatted_message, sizeof(formatted_message), "Error[%s]: %s",
              code.c_str(), message.c_str());
          ESP_LOGI("va", "formatted_message: %s", formatted_message);
          id(va_text).publish_state(formatted_message);

      - delay: 3s
      # TODO: verify that on_end does not trigger simultaneously with on_error
      - script.execute: va_end

display:
  # https://esphome.io/#display-components
  - platform: ssd1306_i2c
    id: main_display
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      if (!global_api_server->is_connected() ) {
        it.printf(0, 0, id(red_hat), "Connecting to HA...");
      } else {
        it.printf(0, 0, id(red_hat), "Connected.");
      }

      if (!id(va_text).state.empty()) {
        int max_chars_per_line = 20;
        std::string text = id(va_text).state.c_str();
        std::string line1 = text.substr(0, max_chars_per_line);
        std::string line2 = text.length() > max_chars_per_line ? text.substr(max_chars_per_line) : "";

        it.printf(0, 23, id(red_hat), "%s", line1.c_str());
        if (!line2.empty()) {
          it.printf(0, 46, id(red_hat), "%s", line2.c_str());
        }
      } else {
        it.printf(0, 23, id(red_hat), "VA Status Unknown!");
      }

font:
  # https://esphome.io/components/font
  - file:
      type: gfonts
      family: "Red Hat Text"
      #italic : false
      #weight: 400
    id: red_hat
    size: 14
    #bpp: 1
    glyphsets:
      - GF_Latin_Core

rtttl:
  # https://esphome.io/components/rtttl
  output: rtttl_out

microphone:
  # https://esphome.io/components/microphone/
  - platform: i2s_audio
    id: va_mic
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO33 # SD - green
    adc_type: external
    #channel: left
    #pdm: false
    #bits_per_sample: 32bit

i2s_audio:
  # https://esphome.io/components/microphone/i2s_audio
  id: i2s_in
  i2s_lrclk_pin: GPIO25 # WS - blue
  i2s_bclk_pin: GPIO32 # SCK - yellow

i2c:
  # https://esphome.io/components/i2c
  sda: GPIO21 # green
  scl: GPIO22 # blue
  scan: false
  frequency: 400kHz

output:
  # https://esphome.io/components/output/
  - platform: ledc
    pin: GPIO27
    id: rtttl_out

  - platform: ledc
    id: rgb_r
    pin: GPIO19
    max_power: 80%
  - platform: ledc
    id: rgb_g
    pin: GPIO18
    max_power: 80%
  - platform: ledc
    id: rgb_b
    pin: GPIO17
    max_power: 80%

text:
  # https://esphome.io/#text-components
  - platform: template
    name: "Tune ${box_num}"
    id: tune_text
    icon: mdi:playlist-play
    mode: text
    optimistic: true
    #restore_value: true
    initial_value: "ScaleUp:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b"
    on_value:
      - logger.log:
          format: "Set tune: %s"
          args: ["x.c_str()"]
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 14

button:
  # https://esphome.io/#button-components
  - platform: template
    name: "Test Tone ${box_num}"
    icon: mdi:play
    on_press:
      - rtttl.play: !lambda "return id(tune_text).state;"
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 12

switch:
  # https://esphome.io/#switch-components
  - id: !remove enable_continuous
  - id: !extend micro_wake_toggle
    turn_off_action:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 40%
                red: 100%
                green: 0%
                blue: 0%
            - text_sensor.template.publish:
                id: va_text
                state: "Frasier Out!"

binary_sensor:
  # https://esphome.io/#binary-sensor-components
  - platform: gpio
    name: "Touch 1 - ${box_num}"
    id: touch_1
    icon: mdi:gesture-tap-box
    pin:
      number: 23
      mode: INPUT_PULLUP
    on_multi_click:
      - timing:
          - ON for at most 1.9s
        then:
          - logger.log: "Single Click - Start Voice"
          - script.execute: va_start
      - timing:
          - ON for at least 2s
        then:
          - logger.log: "2+ Second Touch - Toggle Wake"
          - rtttl.play: "s:d=4,o=6,b=100:16d"
          - switch.toggle: micro_wake_toggle

text_sensor:
  # https://esphome.io/#text-sensor-components
  - platform: template
    name: "VA Text ${box_num}"
    id: va_text
    internal: true
    on_value:
      then:
        - component.update: main_display

  - platform: template
    id: !extend last_gesture
    on_value:
      then:
        - script.execute: va_start
