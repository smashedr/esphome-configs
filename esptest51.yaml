# BENCHED

substitutions:
  box_num: "51"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"
  update_interval: "1min"
  force_update: "true"

<<: !include { file: .common.yaml }

#external_components:
#  - source: github://jesserockz/esphome-components
#    components: [udp_audio]
#
#udp_audio:
#  ip_address: 192.168.1.20
#  port: 6056

captive_portal:

${type}:
  board: "${board}"
  framework:
    type: esp-idf
    version: recommended

esphome:
  name: "${box_name}${box_num}"
  comment: "${type}: ${board} (${comment})"
  on_boot:
    - priority: 600
      then:
        - logger.log: "Boot 600"
        - rtttl.play: !lambda "return id(tune_text).state;"
    # Switch state runs before we can enable micro_wake_word, for now always enable at start
    - priority: -100
      then:
        - logger.log: "Boot -100"
        #- micro_wake_word.start:
        - switch.turn_on: enable_wake

api:
  encryption:
    key: !secret enc_key
  on_client_connected:
    - logger.log:
        format: "API Client: %s - IP: %s"
        args: ["client_info.c_str()", "client_address.c_str()"]
  on_client_disconnected:
    - logger.log: "API Client disconnected!"

web_server:
  port: 80
  ota: false
  version: 3
  sorting_groups:
    #- !include { file: include/web/groups/device.yaml }
    - id: sg_va
      name: "Voice Assistant"
      sorting_weight: -20

debug:
  update_interval: 5min

light:
  - !include { file: include/light/status_led.yaml, vars: { pin: 26 } }

  - platform: rgb
    name: "RGB LED ${box_num}"
    id: rgb_led
    icon: mdi:lightbulb-outline
    red: rgb_r
    green: rgb_g
    blue: rgb_b
    effects: !include_dir_merge_list include/light/effects

micro_wake_word:
  vad:
  models:
    - model: hey_jarvis
    - model: github://smashedr/esphome-configs/models/computer.json@master
    #- model:
    #    url: https://raw.githubusercontent.com/JohnnyPrimus/Custom_V2_MicroWakeWords/refs/heads/main/models/computer/computer.json
    #    type: http
    #- model: okay_nabu
    #- model: hey_mycroft
    #- model: models/computer.json
  on_wake_word_detected:
    then:
      - logger.log: "+ + +  on_wake_word_detected  + + +"
      #- lambda: |-
      #    ESP_LOGI("micro_wake_word", "wake_word: %s", wake_word);
      - voice_assistant.start:
      #    wake_word: !lambda return wake_word;

i2s_audio:
  id: i2s_in
  i2s_lrclk_pin: GPIO25 # WS - blue
  i2s_bclk_pin: GPIO32 # SCK - yellow

microphone:
  - platform: i2s_audio
    id: va_mic
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO33 # SD - green
    adc_type: external
    #channel: left
    pdm: false
    #bits_per_sample: 32bit
    #on_data:
    #  - logger.log:
    #      format: "Received %d bytes"
    #      args: ["x.size()"]

rtttl:
  output: rtttl_out

output:
  - platform: ledc
    pin: GPIO27
    id: rtttl_out

  - platform: ledc
    id: rgb_r
    pin: GPIO19
    max_power: 80%
  - platform: ledc
    id: rgb_g
    pin: GPIO18
    max_power: 80%
  - platform: ledc
    id: rgb_b
    pin: GPIO17
    max_power: 80%

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: false
  frequency: 400kHz

voice_assistant:
  id: va
  microphone: va_mic
  auto_gain: 31dBFS
  noise_suppression_level: 2
  volume_multiplier: 2.0
  #vad_threshold: 3
  on_client_connected:
    then:
      - logger.log: "on_client_connected"
  on_client_disconnected:
    then:
      - logger.log: "on_client_disconnected"

  on_wake_word_detected:
    then:
      - logger.log: "on_wake_word_detected"

  on_start:
    then:
      - logger.log: "on_start"

  on_listening:
    then:
      # Listening - We are listening to what you are saying for processing
      - logger.log: "on_listening"
      - rtttl.play: "s:d=4,o=6,b=225:8d,4e"
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%
      - text_sensor.template.publish:
          id: va_status
          state: "Fraiser is Live"

  on_intent_start:
    then:
      - logger.log: "on_intent_start"
  on_intent_end:
    then:
      - logger.log: "on_intent_end"

  on_stt_vad_start:
    then:
      - logger.log: "on_stt_vad_start"
  on_stt_vad_end:
    then:
      # STT Start - We are done listening and starting to process stt
      - logger.log: "on_stt_vad_end"
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
      - rtttl.play: "s:d=4,o=6,b=225:8e"
      - text_sensor.template.publish:
          id: va_status
          state: "Thinking..."

  on_stt_end:
    then:
      # STT End - We have processed what you said as text
      - light.turn_off: rgb_led
      - rtttl.play: "s:d=4,o=6,b=225:8e,4d"
      - lambda: |-
          ESP_LOGI("va", "on_stt_end text: %s", x.c_str());
          id(va_status).publish_state(x.c_str());

  on_tts_start:
    then:
      # TTS Start - We now have the response text from the VA
      - logger.log:
          format: "on_tts_start text: %s"
          args: ["x.c_str()"]
      - lambda: |-
          ESP_LOGI("va", "on_tts_start text: %s", x.c_str());
          id(va_status).publish_state(x.c_str());
  on_tts_end:
    then:
      # TTS End - We now have a URL to the response audio from the VA
      - logger.log:
          format: "on_tts_end url: %s"
          args: ["x.c_str()"]

  on_end:
    then:
      # DONE - We are done, restart micro_wake_word when VA is done...
      - logger.log: "on_end"
      - wait_until:
          not:
            voice_assistant.is_running:
      - micro_wake_word.start:
      - delay: 30s
      - if:
          condition:
            - not:
                - voice_assistant.is_running:
            - switch.is_on: enable_wake
          then:
            - text_sensor.template.publish:
                id: va_status
                state: "Fraiser is Live"

  on_error:
    then:
      # ERROR - You fucked up Chuck!
      - logger.log: "on_error"
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%
      - rtttl.play: "s:d=4,o=6,b=120:f#"
      # process error code/message here or pretend it didnt happen...
      - lambda: |-
          ESP_LOGW("va", "code: %s", code.c_str());
          ESP_LOGW("va", "message: %s", message.c_str());

          char formatted_message[128];
          snprintf(formatted_message, sizeof(formatted_message), "Error[%s]: %s", code.c_str(), message.c_str());

          ESP_LOGD("va", "formatted_message: %s", formatted_message);
          id(va_status).publish_state(formatted_message);

      - delay: 3s
      # some errors stop micro_wake_word so we blindly start it to ensure its running
      - micro_wake_word.start:
      - light.turn_off: rgb_led

font:
  - file: "fonts/arial.ttf"
    id: font1
    size: 14
  - file: "fonts/arial.ttf"
    id: font2
    size: 14

display:
  - platform: ssd1306_i2c
    id: main_display
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      if (!global_api_server->is_connected() ) {
        it.printf(0, 0, id(font1), "Connecting to HA...");
      } else {
        it.printf(0, 0, id(font1), "Connected.");
      }

      if (!id(va_status).state.empty()) {
        int max_chars_per_line = 18;
        std::string text = id(va_status).state.c_str();
        std::string line1 = text.substr(0, max_chars_per_line);
        std::string line2 = text.length() > max_chars_per_line ? text.substr(max_chars_per_line) : "";

        it.printf(0, 23, id(font2), "%s", line1.c_str());
        if (!line2.empty()) {
          it.printf(0, 46, id(font2), "%s", line2.c_str());
        }
      } else {
        it.printf(0, 23, id(font1), "VA Status Unknown!");
      }

text:
  - platform: template
    name: "Tune ${box_num}"
    id: tune_text
    icon: mdi:playlist-play
    mode: text
    optimistic: true
    #restore_value: true
    initial_value: "ScaleUp:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b"
    on_value:
      - logger.log:
          format: "Set tune: %s"
          args: ["x.c_str()"]
    #web_server:
    #  sorting_group_id: sg_audio
    #  sorting_weight: 14

button:
  - !include { file: include/button/identify.yaml }
  - !include { file: include/button/restart.yaml }
  - !include { file: include/button/safe_mode.yaml }
  - !include { file: include/button/factory_reset.yaml }

  - platform: template
    name: "Start Voice ${box_num}"
    on_press:
      - logger.log: "voice_assistant.start"
      - voice_assistant.start:
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 18

  - platform: template
    name: "Test Tone ${box_num}"
    icon: mdi:play
    on_press:
      - rtttl.play: !lambda "return id(tune_text).state;"
    #web_server:
    #  sorting_group_id: sg_audio
    #  sorting_weight: 12

switch:
  - platform: template
    name: "Enable Wake ${box_num}"
    id: enable_wake
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "micro_wake_word.start"
      - micro_wake_word.start:
      - light.turn_off: rgb_led
      - text_sensor.template.publish:
          id: va_status
          state: "Fraiser is Live"
    turn_off_action:
      - logger.log: "micro_wake_word.stop"
      - micro_wake_word.stop:
      - light.turn_on:
          id: rgb_led
          brightness: 60%
          red: 100%
          green: 0%
          blue: 0%
      - text_sensor.template.publish:
          id: va_status
          state: "Fraiser Out!"
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 12

  #- platform: template
  #  name: "Enable Continuous ${box_num}"
  #  id: enable_continuous
  #  icon: mdi:account-voice
  #  optimistic: true
  #  #restore_mode: RESTORE_DEFAULT_OFF
  #  turn_on_action:
  #    #- lambda: id(va).set_use_wake_word(true);
  #    - if:
  #        condition:
  #          not:
  #            - voice_assistant.is_running:
  #        then:
  #          - logger.log: "voice_assistant.start_continuous"
  #          - voice_assistant.start_continuous:
  #  turn_off_action:
  #    #- lambda: id(va).set_use_wake_word(false);
  #    - logger.log: "voice_assistant.stop"
  #    - voice_assistant.stop:
  #  web_server:
  #    sorting_group_id: sg_va
  #    sorting_weight: 14

  #- platform: template
  #  name: "Start Capture ${box_num}"
  #  id: start_capture
  #  icon: mdi:account-voice
  #  optimistic: true
  #  #restore_mode: RESTORE_DEFAULT_ON
  #  turn_on_action:
  #    - logger.log: "microphone.capture: va_mic"
  #    - microphone.capture: va_mic
  #    - light.turn_on: main_led
  #  turn_off_action:
  #    - logger.log: "microphone.stop_capture: va_mic"
  #    - microphone.stop_capture: va_mic
  #    - light.turn_off: main_led
  #  web_server:
  #    sorting_group_id: sg_va
  #    sorting_weight: 16

text_sensor:
  - !include { file: include/text/debug.yaml }
  - !include { file: include/text/version.yaml }
  - !include { file: include/text/wifi_info.yaml }

  - platform: template
    name: "VA Status"
    id: va_status
    internal: true
    on_value:
      then:
        - component.update: main_display
        #- lambda: |-
        #    ESP_LOGI("va", "New Status: %s", x.c_str());
        #    id(main_display).update();

  #- platform: template
  #  name: "VA Response"
  #  id: va_response
  #  internal: true
  #  on_value:
  #    then:
  #      - component.update: main_display

binary_sensor:
  - !include { file: include/binary/status.yaml }

  - platform: gpio
    name: "Touch 1 - ${box_num}"
    id: touch_1
    icon: mdi:gesture-tap-box
    pin:
      number: 23
      mode: INPUT_PULLUP
    on_press:
      then:
        - logger.log: "Touch START"
        - switch.toggle: enable_wake
        - rtttl.play: "s:d=4,o=6,b=100:16d"
    on_release:
      then:
        - logger.log: "Touch END"

sensor:
  - !include { file: include/sensor/debug.yaml }
  - !include { file: include/sensor/internal_temperature.yaml }
  - !include { file: include/sensor/uptime.yaml }
  - !include { file: include/sensor/wifi_signal.yaml }
