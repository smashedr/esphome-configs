# BENCHED - VA TEST

substitutions:
  box_num: "51"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin (narrow)"

packages:
  debug: !include { file: include/debug.yaml }
  common: !include { file: include/common.yaml }
  status_led: !include
    file: include/status_led.yaml
    vars:
      pin: GPIO26

<<: !include { file: include/apds9960/apds9960.yaml }

#external_components:
#  - source: github://jesserockz/esphome-components
#    components: [udp_audio]
#
#udp_audio:
#  ip_address: 192.168.1.20
#  port: 6056

${type}:
  # https://esphome.io/#supported-microcontrollers
  framework:
    sdkconfig_options:
      CONFIG_ESP32_DEFAULT_CPU_FREQ_240: "y"

esphome:
  # https://esphome.io/components/esphome
  on_boot:
    - priority: 600
      then:
        - logger.log: "Boot 600"
        - rtttl.play: !lambda "return id(tune_text).state;"
    - priority: -100
      then:
        - logger.log: "Boot -100"
        #- wait_until:
        #    - api.connected:
        - if:
            condition:
              - switch.is_on: enable_wake
            then:
              - script.execute: micro_wake_enable

web_server:
  # https://esphome.io/components/web_server
  sorting_groups:
    - id: sg_va
      name: "Voice Assistant"
      sorting_weight: -30
    - !include { file: include/apds9960/sg.yaml, vars: { sorting_weight: -25 } }
    - id: sg_audio
      name: "Audio"
      sorting_weight: -20

micro_wake_word:
  # https://esphome.io/components/micro_wake_word
  vad:
  models:
    - model: hey_jarvis
    - model: github://smashedr/esphome-configs/models/computer.json@master
    #- model: models/computer.json
  on_wake_word_detected:
    then:
      - logger.log: "+ + +  on_wake_word_detected  + + +"
      - voice_assistant.start:
      #    wake_word: !lambda return wake_word;
      #- lambda: |-
      #    ESP_LOGI("micro_wake_word", "wake_word: %s", wake_word);

light:
  - platform: rgb
    name: "RGB LED ${box_num}"
    id: rgb_led
    icon: mdi:lightbulb-outline
    disabled_by_default: true
    red: rgb_r
    green: rgb_g
    blue: rgb_b
    effects: !include_dir_merge_list include/light/effects

script:
  # https://esphome.io/components/script
  - id: va_start
    then:
      - logger.log: "Running script: va_start"
      - if:
          condition:
            - voice_assistant.is_running:
          then:
            - logger.log: "va_start: voice_assistant.stop"
            # TODO: verify that voice_assistant.stop does not trigger on_end which runs va_end
            - voice_assistant.stop:
            - script.execute: va_end
            - script.execute: set_text
          else:
            - logger.log: "va_start: micro_wake_word.stop"
            - micro_wake_word.stop:
            - wait_until:
                condition:
                  not:
                    microphone.is_capturing:
                timeout: 500ms
            - logger.log: "va_start: voice_assistant.start"
            - voice_assistant.start:

  - id: va_end
    mode: restart
    then:
      - logger.log: "Running script: va_end"
      - script.execute: turn_off_led
      - rtttl.play: "s:d=4,o=6,b=225:8e,4d"
      - if:
          condition:
            switch.is_on: enable_wake
          then:
            - wait_until:
                not:
                  voice_assistant.is_running:
            - micro_wake_word.start:
      - delay: 30s
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: set_text

  - id: micro_wake_enable
    then:
      - logger.log: "Enable Micro Wake Word"
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - micro_wake_word.start:
            - light.turn_off: rgb_led
            - text_sensor.template.publish:
                id: va_text
                state: "Frasier is Live..."

  - id: turn_off_led
    mode: restart
    then:
      - logger.log: "Running script: turn_off_led"
      - if:
          condition:
            switch.is_on: enable_wake
          then:
            light.turn_off: rgb_led
          else:
            light.turn_on:
              id: rgb_led
              brightness: 50%
              red: 100%
              green: 0%
              blue: 0%

  - id: set_text
    then:
      - logger.log: "Running script: set_text"
      - if:
          condition:
            switch.is_on: enable_wake
          then:
            text_sensor.template.publish:
              id: va_text
              state: "Frasier is Live"
          else:
            text_sensor.template.publish:
              id: va_text
              state: "Frasier Out!"

voice_assistant:
  # https://esphome.io/components/voice_assistant
  id: va
  microphone: va_mic
  #speaker: va_speaker
  #media_player: va_media
  auto_gain: 31dBFS
  noise_suppression_level: 2
  volume_multiplier: 2.0
  #conversation_timeout : 300s
  #use_wake_word: false

  on_idle:
    then:
      - logger.log: "on_idle"

  on_client_connected:
    then:
      - logger.log: "on_client_connected"
  on_client_disconnected:
    then:
      - logger.log: "on_client_disconnected"

  on_wake_word_detected:
    then:
      - logger.log: "on_wake_word_detected"

  on_start:
    then:
      - logger.log: "on_start"

  on_listening:
    then:
      # Listening - We are listening to what you are saying for processing
      - logger.log: "on_listening"
      - rtttl.play: "s:d=4,o=6,b=225:8d,4e"
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%
          #effect: "Slow Pulse"
      - text_sensor.template.publish:
          id: va_text
          state: "I'm Listening..."

  on_stt_vad_start:
    then:
      - logger.log: "on_stt_vad_start"
  on_stt_vad_end:
    then:
      # STT Start - We are done listening and starting to process stt
      - logger.log: "on_stt_vad_end"
      - light.turn_on:
          id: rgb_led
          #brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
          effect: "Normal Pulse"
      - rtttl.play: "s:d=4,o=6,b=225:8e"
      - text_sensor.template.publish:
          id: va_text
          state: "Thinking..."

  on_stt_end:
    then:
      # STT End - We have processed what you said as text
      - lambda: |-
          ESP_LOGI("va", "on_stt_end text: %s", x.c_str());
          id(va_text).publish_state(x.c_str());

  on_intent_start:
    then:
      - logger.log: "on_intent_start"
  on_intent_end:
    then:
      - logger.log: "on_intent_end"

  on_tts_start:
    then:
      # TTS Start - We now have the response text from the VA
      - lambda: |-
          ESP_LOGI("va", "on_tts_start text: %s", x.c_str());
          id(va_text).publish_state(x.c_str());
  on_tts_end:
    then:
      # TTS End - We now have a URL to the response audio from the VA
      - logger.log:
          format: "on_tts_end url: %s"
          args: ["x.c_str()"]
          level: INFO

  on_end:
    then:
      # DONE - We are done, restart micro_wake_word when VA is done...
      - logger.log: "on_end"
      - script.execute: va_end

  on_error:
    then:
      # ERROR - You fucked up Chuck!
      - logger.log: "on_error"
      - light.turn_on:
          id: rgb_led
          brightness: 100%
          red: 0%
          green: 100%
          blue: 100%
      - rtttl.play: "s:d=4,o=6,b=120:f#"
      - lambda: |-
          ESP_LOGW("va", "code: %s", code.c_str());
          ESP_LOGW("va", "message: %s", message.c_str());

          char formatted_message[128];
          snprintf(formatted_message, sizeof(formatted_message), "Error[%s]: %s", code.c_str(), message.c_str());

          ESP_LOGI("va", "formatted_message: %s", formatted_message);
          id(va_text).publish_state(formatted_message);

      - delay: 3s
      - script.execute: va_end

display:
  # https://esphome.io/#display-components
  - platform: ssd1306_i2c
    id: main_display
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      if (!global_api_server->is_connected() ) {
        it.printf(0, 0, id(red_hat), "Connecting to HA...");
      } else {
        it.printf(0, 0, id(red_hat), "Connected.");
      }

      if (!id(va_text).state.empty()) {
        int max_chars_per_line = 20;
        std::string text = id(va_text).state.c_str();
        std::string line1 = text.substr(0, max_chars_per_line);
        std::string line2 = text.length() > max_chars_per_line ? text.substr(max_chars_per_line) : "";

        it.printf(0, 23, id(red_hat), "%s", line1.c_str());
        if (!line2.empty()) {
          it.printf(0, 46, id(red_hat), "%s", line2.c_str());
        }
      } else {
        it.printf(0, 23, id(red_hat), "VA Status Unknown!");
      }

font:
  # https://esphome.io/components/font
  - file:
      type: gfonts
      family: "Red Hat Text"
      #italic : false
      #weight: 400
    id: red_hat
    size: 14
    #bpp: 1
    glyphsets:
      - GF_Latin_Core

  #- file: "fonts/arial.ttf"
  #  id: arial_ttf
  #  size: 14
  #  bpp: 1
  #  glyphsets:
  #    - GF_Latin_Core

rtttl:
  # https://esphome.io/components/rtttl
  output: rtttl_out

microphone:
  # https://esphome.io/components/microphone/
  - platform: i2s_audio
    id: va_mic
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO33 # SD - green
    adc_type: external
    #channel: left
    #pdm: false
    #bits_per_sample: 32bit

i2s_audio:
  # https://esphome.io/components/microphone/i2s_audio
  id: i2s_in
  i2s_lrclk_pin: GPIO25 # WS - blue
  i2s_bclk_pin: GPIO32 # SCK - yellow

i2c:
  # https://esphome.io/components/i2c
  sda: GPIO21 # green
  scl: GPIO22 # blue
  scan: false
  frequency: 400kHz

output:
  # https://esphome.io/components/output/
  - platform: ledc
    pin: GPIO27
    id: rtttl_out

  - platform: ledc
    id: rgb_r
    pin: GPIO19
    max_power: 80%
  - platform: ledc
    id: rgb_g
    pin: GPIO18
    max_power: 80%
  - platform: ledc
    id: rgb_b
    pin: GPIO17
    max_power: 80%

text:
  # https://esphome.io/#text-components
  - platform: template
    name: "Tune ${box_num}"
    id: tune_text
    icon: mdi:playlist-play
    mode: text
    optimistic: true
    #restore_value: true
    initial_value: "ScaleUp:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b"
    on_value:
      - logger.log:
          format: "Set tune: %s"
          args: ["x.c_str()"]
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 14

button:
  # https://esphome.io/#button-components
  - platform: template
    name: "Activate Assistant ${box_num}"
    icon: mdi:microphone
    on_press:
      - logger.log: "script.execute: va_start"
      - script.execute: va_start
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 18

  - platform: template
    name: "Test Tone ${box_num}"
    icon: mdi:play
    on_press:
      - rtttl.play: !lambda "return id(tune_text).state;"
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 12

switch:
  # https://esphome.io/#switch-components
  - platform: template
    name: "Enable Wake ${box_num}"
    id: enable_wake
    icon: mdi:account-voice
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "Enable Micro Wake Word"
      - script.execute: micro_wake_enable
      #- if:
      #    condition:
      #      not:
      #        voice_assistant.is_running:
      #    then:
      #      - micro_wake_word.start:
      #      - light.turn_off: rgb_led
      #      - text_sensor.template.publish:
      #          id: va_text
      #          state: "Frasier is Live..."
    turn_off_action:
      - logger.log: "Disable Micro Wake Word"
      - micro_wake_word.stop:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 50%
                red: 100%
                green: 0%
                blue: 0%
            - text_sensor.template.publish:
                id: va_text
                state: "Frasier Out!"
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 12

  #- platform: template
  #  name: "Enable Continuous ${box_num}"
  #  id: enable_continuous
  #  icon: mdi:account-voice
  #  optimistic: true
  #  #restore_mode: RESTORE_DEFAULT_OFF
  #  turn_on_action:
  #    #- lambda: id(va).set_use_wake_word(true);
  #    - if:
  #        condition:
  #          not:
  #            - voice_assistant.is_running:
  #        then:
  #          - logger.log: "voice_assistant.start_continuous"
  #          - voice_assistant.start_continuous:
  #  turn_off_action:
  #    #- lambda: id(va).set_use_wake_word(false);
  #    - logger.log: "voice_assistant.stop"
  #    - voice_assistant.stop:
  #  web_server:
  #    sorting_group_id: sg_va
  #    sorting_weight: 14

  #- platform: template
  #  name: "Start Capture ${box_num}"
  #  id: start_capture
  #  icon: mdi:account-voice
  #  optimistic: true
  #  #restore_mode: RESTORE_DEFAULT_ON
  #  turn_on_action:
  #    - logger.log: "microphone.capture: va_mic"
  #    - microphone.capture: va_mic
  #    - light.turn_on: main_led
  #  turn_off_action:
  #    - logger.log: "microphone.stop_capture: va_mic"
  #    - microphone.stop_capture: va_mic
  #    - light.turn_off: main_led
  #  web_server:
  #    sorting_group_id: sg_va
  #    sorting_weight: 16

binary_sensor:
  # https://esphome.io/#binary-sensor-components
  - !include { file: include/apds9960/binary_sensor/up.yaml }
  - !include { file: include/apds9960/binary_sensor/down.yaml }
  - !include { file: include/apds9960/binary_sensor/left.yaml }
  - !include { file: include/apds9960/binary_sensor/right.yaml }

  - platform: gpio
    name: "Touch 1 - ${box_num}"
    id: touch_1
    icon: mdi:gesture-tap-box
    pin:
      number: 23
      mode: INPUT_PULLUP
    on_multi_click:
      - timing:
          - ON for at most 1.9s
        then:
          - logger.log: "Single Click - Start Voice"
          - script.execute: va_start
      - timing:
          - ON for at least 2s
        then:
          - logger.log: "2+ Second Touch - Toggle Wake"
          - rtttl.play: "s:d=4,o=6,b=100:16d"
          - switch.toggle: enable_wake

text_sensor:
  # https://esphome.io/#text-sensor-components
  - platform: template
    name: "VA Text ${box_num}"
    id: va_text
    internal: true
    on_value:
      then:
        - component.update: main_display
        #- lambda: |-
        #    ESP_LOGI("va", "New Status: %s", x.c_str());
        #    id(main_display).update();

  - platform: template
    name: "Last Gesture ${box_num}"
    id: last_gesture
    internal: true
    on_value:
      then:
        - logger.log:
            format: "Direction: %s"
            args: ["x.c_str()"]
        - script.execute: va_start
        #- rtttl.play: "s:d=4,o=6,b=100:16d"
        #- light.turn_on: main_led
        #- delay: 100ms
        #- light.turn_off: main_led
