substitutions:
  box_num: "51"
  box_name: "esptest"
  type: "esp32"
  board: "nodemcu-32s"
  comment: "38-pin narrow"
  update_interval: "1min"
  force_update: "true"

<<: !include .common.yaml
<<: !include include/web_server.yaml

logger:
  level: VERBOSE

esphome:
  name: "${box_name}${box_num}"
  comment: "${type}: ${board} (${comment})"

#web_server: !include include/web_server.yaml
button: !include include/button.yaml
captive_portal:

api:
  encryption:
    key: !secret enc_key
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda "return song_str;"

light:
  - platform: status_led
    id: main_led
    pin: 32

output:
  - platform: ledc
    pin: 33
    id: rtttl_out

rtttl:
  output: rtttl_out

binary_sensor:
  - platform: status
    name: "Status ${box_num}"

  - platform: gpio
    name: "Door Freezer"
    id: door_sensor_1
    pin:
      number: 25
      mode: INPUT_PULLUP
    device_class: door
    on_press:
      then:
        - logger.log: "DOOR --- OPEN"
        # - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - light.turn_on: main_led
    on_release:
      then:
        - logger.log: "DOOR --- CLOSED"
        - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - if:
            condition:
              binary_sensor.is_off: door_sensor_2
            then:
              - light.turn_off: main_led

  - platform: gpio
    name: "Door Refrigerator"
    id: door_sensor_2
    pin:
      number: 26
      mode: INPUT_PULLUP
    device_class: door
    on_press:
      then:
        - logger.log: "DOOR --- OPEN"
        # - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - light.turn_on: main_led
    on_release:
      then:
        - logger.log: "DOOR --- CLOSED"
        - rtttl.play: "one:d=4,o=4,b=240:6e6"
        - if:
            condition:
              binary_sensor.is_off: door_sensor_1
            then:
              - light.turn_off: main_led

sensor:
  - platform: uptime
    name: "Uptime ${box_num}"
    update_interval: 5min

  - platform: internal_temperature
    name: "Core Temp ${box_num}"
    update_interval: 5min
    force_update: ${force_update}

  - platform: wifi_signal
    name: "WiFi Signal ${box_num}"
    update_interval: 1min
    force_update: true
    filters:
      - filter_out: 0
      - median:
