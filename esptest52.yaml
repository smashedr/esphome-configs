# BENCHED - MIC TEST

substitutions:
  # https://esphome.io/components/substitutions
  box_num: "52"
  box_name: "esptest"
  type: "esp32"
  board: "esp32dev"
  comment: "38-pin"

packages:
  # https://esphome.io/components/packages.html
  debug: !include { file: include/debug.yaml }
  common: !include { file: include/common.yaml }

#external_components:
#  - source: github://jesserockz/esphome-components
#    components: [udp_audio]
#
#udp_audio:
#  ip_address: 192.168.1.20
#  port: 6056

${type}:
  # https://esphome.io/#supported-microcontrollers
  framework:
    sdkconfig_options:
      CONFIG_ESP32_DEFAULT_CPU_FREQ_240: "y"

#globals:
#  - id: wake_word_status
#    type: bool
#    restore_value: yes
#    initial_value: "false"

esphome:
  # https://esphome.io/components/esphome
  on_boot:
    - priority: 600
      then:
        - logger.log: "Boot 600"
        - light.turn_on:
            id: main_led
            effect: "Full Pulse"
        #- switch.turn_on: buzzer
        #- delay: 75ms
        #- switch.turn_off: buzzer
    - priority: -100
      then:
        - logger.log: "Boot -100"
        - if:
            condition:
              - switch.is_on: enable_wake
            then:
              - script.execute: micro_wake_enable
              #- logger.log: "Enabling Micro Wake Word..."
              #- micro_wake_word.start:
        - wait_until:
            - api.connected:
        - light.turn_off: main_led

api:
  # https://esphome.io/components/api
  on_client_connected:
    - lambda: |-
        if (client_info.find("Home Assistant") != std::string::npos) {
          ESP_LOGI("api", "API Connected: Home Assistant (%s)", client_address.c_str());
        } else {
          ESP_LOGI("api", "Client Connected: %s (%s)", client_info.c_str(), client_address.c_str());
        }
    #- if:
    #    condition:
    #      api.connected:
    #    then:
    #      - light.turn_on:
    #          id: main_led
    #          effect: "Full Pulse"
  on_client_disconnected:
    - lambda: |-
        if (client_info.find("Home Assistant") != std::string::npos) {
          ESP_LOGW("api", "API Disconnected: Home Assistant (%s)", client_address.c_str());
        } else {
          ESP_LOGI("api", "Client Disconnected: %s (%s)", client_info.c_str(), client_address.c_str());
        }
    #- if:
    #    condition:
    #      not:
    #        api.connected:
    #    then:
    #      - logger.log:
    #          format: "API Disconnected!"
    #          level: WARN
    #      - light.turn_on:
    #          id: main_led
    #          effect: "Full Pulse"

web_server:
  # https://esphome.io/components/web_server
  sorting_groups:
    - id: sg_va
      name: "Voice Assistant"
      sorting_weight: -30
    - id: sg_audio
      name: "Audio"
      sorting_weight: -20

micro_wake_word:
  # https://esphome.io/components/micro_wake_word
  vad:
  models:
    - model: hey_jarvis
  on_wake_word_detected:
    then:
      - logger.log: "+ + +  on_wake_word_detected  + + +"
      - voice_assistant.start:
      #    wake_word: !lambda return wake_word;
      #- lambda: |-
      #    ESP_LOGI("micro_wake_word", "wake_word: %s", wake_word);

light:
  # https://esphome.io/components/light/
  - platform: monochromatic
    name: "Monochromatic Light ${box_num}"
    id: main_led
    icon: mdi:lightbulb-outline
    disabled_by_default: true
    output: main_ledc
    effects: !include { file: include/light/effects/pulse.yaml }
    #web_server:
    #  sorting_group_id: sg_lights
    #  sorting_weight: 10

script:
  # https://esphome.io/components/script
  - id: va_start
    then:
      - if:
          condition:
            - voice_assistant.is_running:
          then:
            - logger.log: "va_start: voice_assistant.stop"
            # TODO: verify that voice_assistant.stop does not trigger on_end which runs va_end
            - voice_assistant.stop:
            - script.execute: va_end
          else:
            - logger.log: "va_start: micro_wake_word.stop"
            - micro_wake_word.stop:
            - wait_until:
                condition:
                  not:
                    microphone.is_capturing:
                timeout: 500ms
            - logger.log: "va_start: voice_assistant.start"
            - voice_assistant.start:

  - id: va_end
    mode: restart
    then:
      - light.turn_off: main_led
      #- switch.turn_on: buzzer
      #- delay: 50ms
      #- switch.turn_off: buzzer
      - if:
          condition:
            switch.is_on: enable_wake
          then:
            - wait_until:
                not:
                  voice_assistant.is_running:
            - micro_wake_word.start:

  - id: micro_wake_enable
    then:
      - logger.log: "Enable Micro Wake Word"
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - micro_wake_word.start:

voice_assistant:
  # https://esphome.io/components/voice_assistant
  id: va
  microphone: va_mic
  #speaker: va_speaker
  #media_player: va_media
  auto_gain: 31dBFS
  noise_suppression_level: 2
  volume_multiplier: 2.0
  #conversation_timeout : 300s
  #use_wake_word: false

  on_idle:
    then:
      - logger.log: "on_idle"

  on_client_connected:
    then:
      - logger.log: "va: on_client_connected"
  on_client_disconnected:
    then:
      - logger.log: "va: on_client_disconnected"

  on_wake_word_detected:
    then:
      - logger.log: "on_wake_word_detected"

  on_start:
    then:
      - logger.log: "on_start"

  on_listening:
    then:
      # Listening - We are listening to what you are saying for processing
      - logger.log: "on_listening"
      - light.turn_on:
          id: main_led
          brightness: 75%
          transition_length: 0s
      #- switch.turn_on: buzzer
      #- delay: 75ms
      #- switch.turn_off: buzzer

  on_stt_vad_start:
    then:
      - logger.log: "on_stt_vad_start"
  on_stt_vad_end:
    then:
      # STT Start - We are done listening and starting to process stt
      - logger.log: "on_stt_vad_end"
      - light.turn_on:
          id: main_led
          effect: "Fast Pulse"

  on_stt_end:
    then:
      # STT End - We have processed what you said as text
      - lambda: |-
          ESP_LOGI("va", "on_stt_end text: %s", x.c_str());

  on_intent_start:
    then:
      - logger.log: "on_intent_start"
  on_intent_end:
    then:
      - logger.log: "on_intent_end"

  on_tts_start:
    then:
      # TTS Start - We now have the response text from the VA
      - lambda: |-
          ESP_LOGI("va", "on_tts_start text: %s", x.c_str());
      #- homeassistant.action:
      #    action: notify.alexa_media
      #    data:
      #      target: media_player.desk
      #      message: "!lambda return x.c_str();"
      #      data:
      #        type: tts
      - homeassistant.action:
          action: notify.alexa_media
          data:
            target: media_player.desk
          data_template:
            message: "{{ message }}"
          variables:
            message: |-
              return x.c_str();

  on_tts_end:
    then:
      # TTS End - We now have a URL to the response audio from the VA
      - logger.log:
          format: "on_tts_end url: %s"
          args: ["x.c_str()"]
          level: INFO

  on_end:
    then:
      # DONE - We are done, restart micro_wake_word when VA is done...
      - logger.log: "on_end"
      - script.execute: va_end

  on_error:
    then:
      # ERROR - You fucked up Chuck!
      - logger.log: "on_error"
      - lambda: |-
          ESP_LOGW("va", "code: %s", code.c_str());
          ESP_LOGW("va", "message: %s", message.c_str());

          char formatted_message[128];
          snprintf(formatted_message, sizeof(formatted_message), "Error[%s]: %s", code.c_str(), message.c_str());
          ESP_LOGI("va", "formatted_message: %s", formatted_message);

      - script.execute: va_end

microphone:
  # https://esphome.io/components/microphone/
  - platform: i2s_audio
    id: va_mic
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO33 # SD - green
    adc_type: external
    #channel: left
    #pdm: false
    #bits_per_sample: 32bit

i2s_audio:
  # https://esphome.io/components/microphone/i2s_audio
  id: i2s_in
  i2s_lrclk_pin: GPIO25 # WS - blue
  i2s_bclk_pin: GPIO32 # SCK - yellow

output:
  # https://esphome.io/components/output/
  - platform: ledc
    id: main_ledc
    pin: GPIO26
    max_power: 80%

button:
  # https://esphome.io/#button-components
  - platform: template
    name: "Activate Assistant ${box_num}"
    icon: mdi:microphone
    on_press:
      - logger.log: "script.execute: va_start"
      - script.execute: va_start
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 16

#  - platform: template
#    name: "DEBUG BUTTON ${box_num}"
#    icon: mdi:bug-play
#    disabled_by_default: true
#    on_press:
#      - logger.log: "debug button press, please fasten your seat belt..."
#      - if:
#          condition:
#            - lambda: "return id(wake_word_status);"
#          then:
#            - logger.log: "TRUE: id(wake_word_status)"
#      - if:
#          condition:
#            - lambda: "return id(wake_word_status) == 'true';"
#          then:
#            - logger.log: "TRUE: id(wake_word_status) == 'true'"

switch:
  # https://esphome.io/#switch-components
  - platform: template
    name: "Enable Wake ${box_num}"
    id: enable_wake
    icon: mdi:account-voice
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "Enable Micro Wake Word"
      - script.execute: micro_wake_enable
      #- if:
      #    condition:
      #      not:
      #        voice_assistant.is_running:
      #    then:
      #      - micro_wake_word.start:
    turn_off_action:
      - logger.log: "Disable Micro Wake Word"
      - micro_wake_word.stop:
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 12

  - platform: template
    name: "Enable Continuous ${box_num}"
    id: enable_continuous
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      #- lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running:
          then:
            - logger.log: "voice_assistant.start_continuous"
            - voice_assistant.start_continuous:
    turn_off_action:
      #- lambda: id(va).set_use_wake_word(false);
      - logger.log: "voice_assistant.stop"
      - voice_assistant.stop:
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 14

  - platform: template
    name: "Start Capture ${box_num}"
    id: start_capture
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "microphone.capture: va_mic"
      - microphone.capture: va_mic
      - light.turn_on: main_led
    turn_off_action:
      - logger.log: "microphone.stop_capture: va_mic"
      - microphone.stop_capture: va_mic
      - light.turn_off: main_led
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 12

  - platform: gpio
    name: "Buzzer ${box_num}"
    id: buzzer
    pin: 27
    icon: "mdi:volume-high"
    disabled_by_default: true
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 14
