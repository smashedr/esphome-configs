# BENCHED - MIC TEST

substitutions:
  box_num: "52"
  box_name: "esptest"
  type: "esp32"
  board: "esp32dev"
  comment: "38-pin"
  update_interval: "1min"
  force_update: "true"

<<: !include { file: .common.yaml }

captive_portal:

debug:
  update_interval: 5min

#external_components:
#  - source: github://jesserockz/esphome-components
#    components: [udp_audio]
#
#udp_audio:
#  ip_address: 192.168.1.20
#  port: 6056

${type}:
  board: "${board}"
  framework:
    type: esp-idf
    version: recommended

esphome:
  name: "${box_name}${box_num}"
  comment: "${type}: ${board} (${comment})"
  on_boot:
    - priority: -100
      then:
        - logger.log: "Boot -100"
        #- micro_wake_word.start:
        #- switch.turn_on: enable_wake

api:
  encryption:
    key: !secret enc_key
  on_client_connected:
    - logger.log:
        format: "API Client: %s - IP: %s"
        args: ["client_info.c_str()", "client_address.c_str()"]
  on_client_disconnected:
    - logger.log: "API Client disconnected!"

web_server:
  port: 80
  ota: false
  version: 3
  sorting_groups:
    - id: sg_va
      name: "Voice Assistant"
      sorting_weight: -30
    - id: sg_audio
      name: "Audio"
      sorting_weight: -20

micro_wake_word:
  vad:
  models:
    - model: hey_jarvis
  on_wake_word_detected:
    then:
      - logger.log: "+ + +  on_wake_word_detected  + + +"
      - voice_assistant.start:
      #    wake_word: !lambda return wake_word;
      #- lambda: |-
      #    ESP_LOGI("micro_wake_word", "wake_word: %s", wake_word);

light:
  - !include { file: include/light/status_led.yaml, vars: { pin: 26 } }

script:
  - id: va_start
    then:
      - if:
          condition:
            - voice_assistant.is_running:
          then:
            - logger.log: "va_start: voice_assistant.stop"
            # TODO: verify that voice_assistant.stop does not trigger on_end which runs va_end
            - voice_assistant.stop:
            - script.execute: va_end
          else:
            - logger.log: "va_start: micro_wake_word.stop"
            - micro_wake_word.stop:
            - wait_until:
                condition:
                  not:
                    microphone.is_capturing:
                timeout: 250ms
            - logger.log: "va_start: voice_assistant.start"
            - voice_assistant.start:

  - id: va_end
    mode: restart
    then:
      - light.turn_off: main_led
      - if:
          condition:
            switch.is_on: enable_wake
          then:
            - wait_until:
                not:
                  voice_assistant.is_running:
            - micro_wake_word.start:

voice_assistant:
  id: va
  microphone: va_mic
  #speaker: va_speaker
  #media_player: va_media
  auto_gain: 31dBFS
  noise_suppression_level: 2
  volume_multiplier: 2.0
  #conversation_timeout : 300s
  #use_wake_word: false

  on_client_connected:
    then:
      - logger.log: "on_client_connected"
  on_client_disconnected:
    then:
      - logger.log: "on_client_disconnected"

  on_idle:
    then:
      - logger.log: "on_idle"

  on_wake_word_detected:
    then:
      - logger.log: "on_wake_word_detected"

  on_start:
    then:
      - logger.log: "on_start"

  on_listening:
    then:
      # Listening - We are listening to what you are saying for processing
      - logger.log: "on_listening"
      - light.turn_on: main_led

  on_stt_vad_start:
    then:
      - logger.log: "on_stt_vad_start"
  on_stt_vad_end:
    then:
      # STT Start - We are done listening and starting to process stt
      - logger.log: "on_stt_vad_end"

  on_stt_end:
    then:
      # STT End - We have processed what you said as text
      - lambda: |-
          ESP_LOGI("va", "on_stt_end text: %s", x.c_str());

  on_intent_start:
    then:
      - logger.log: "on_intent_start"
  on_intent_end:
    then:
      - logger.log: "on_intent_end"

  on_tts_start:
    then:
      # TTS Start - We now have the response text from the VA
      - lambda: |-
          ESP_LOGI("va", "on_tts_start text: %s", x.c_str());
  on_tts_end:
    then:
      # TTS End - We now have a URL to the response audio from the VA
      - logger.log:
          format: "on_tts_end url: %s"
          args: ["x.c_str()"]
          level: INFO

  on_end:
    then:
      # DONE - We are done, restart micro_wake_word when VA is done...
      - logger.log: "on_end"
      - script.execute: va_end

  on_error:
    then:
      # ERROR - You fucked up Chuck!
      - logger.log: "on_error"
      - lambda: |-
          ESP_LOGW("va", "code: %s", code.c_str());
          ESP_LOGW("va", "message: %s", message.c_str());

          char formatted_message[128];
          snprintf(formatted_message, sizeof(formatted_message), "Error[%s]: %s", code.c_str(), message.c_str());
          ESP_LOGI("va", "formatted_message: %s", formatted_message);

      - script.execute: va_end

microphone:
  - platform: i2s_audio
    id: va_mic
    i2s_audio_id: i2s_in
    i2s_din_pin: GPIO33 # SD - green
    adc_type: external
    #channel: left
    pdm: false
    #bits_per_sample: 32bit
    #on_data:
    #  - logger.log:
    #      format: "Received %d bytes"
    #      args: ["x.size()"]

i2s_audio:
  id: i2s_in
  i2s_lrclk_pin: GPIO25 # WS - blue
  i2s_bclk_pin: GPIO32 # SCK - yellow

button:
  - !include { file: include/button/identify.yaml }
  - !include { file: include/button/restart.yaml }
  - !include { file: include/button/safe_mode.yaml }
  - !include { file: include/button/factory_reset.yaml }

  - platform: template
    name: "Activate Assistant ${box_num}"
    icon: mdi:microphone
    on_press:
      - logger.log: "script.execute: va_start"
      - script.execute: va_start
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 16

switch:
  - platform: template
    name: "Enable Wake ${box_num}"
    id: enable_wake
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "micro_wake_word.start"
      - micro_wake_word.start:
    turn_off_action:
      - logger.log: "micro_wake_word.stop"
      - micro_wake_word.stop:
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 12

  - platform: template
    name: "Enable Continuous ${box_num}"
    id: enable_continuous
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      #- lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running:
          then:
            - logger.log: "voice_assistant.start_continuous"
            - voice_assistant.start_continuous:
    turn_off_action:
      #- lambda: id(va).set_use_wake_word(false);
      - logger.log: "voice_assistant.stop"
      - voice_assistant.stop:
    web_server:
      sorting_group_id: sg_va
      sorting_weight: 14

  - platform: template
    name: "Start Capture ${box_num}"
    id: start_capture
    icon: mdi:account-voice
    optimistic: true
    #restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - logger.log: "microphone.capture: va_mic"
      - microphone.capture: va_mic
      - light.turn_on: main_led
    turn_off_action:
      - logger.log: "microphone.stop_capture: va_mic"
      - microphone.stop_capture: va_mic
      - light.turn_off: main_led
    web_server:
      sorting_group_id: sg_audio
      sorting_weight: 13

text_sensor:
  - !include { file: include/text/debug.yaml }
  - !include { file: include/text/version.yaml }
  - !include { file: include/text/wifi_info.yaml }

sensor:
  - !include { file: include/sensor/debug.yaml }
  - !include { file: include/sensor/internal_temperature.yaml }
  - !include { file: include/sensor/uptime.yaml }
  - !include { file: include/sensor/wifi_signal.yaml }
